version: "3.9"

volumes:
  influxdb-volume: {}
  postgres-volume: {}
  grafana-volume: {}

networks:
  monitoring:

x-healthcheck: &default-healthcheck
  test: [ "CMD", "echo", "true"]
  interval: 10s
  timeout: 60s
  retries: 5
  start_period: 20s

services:
  influxdb:
    container_name: influxdb
    image: influxdb:${INFLUXDB_VERSION}
    networks:
      - monitoring
    ports:
      - 8086:8086
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
    restart: on-failure:10
    environment:      
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${STACK_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${STACK_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - influxdb-volume:/var/lib/influxdb2
      - influxdb-volume:/etc/influxdb2

  telegraf:
    container_name: telegraf
    image: telegraf:${TELEGRAF_VERSION}
    command: -config /etc/telegraf/telegraf.conf -config-directory /etc/telegraf/telegraf.d
    # "1000" is the group id of the docker daemon, run: $(stat -c '%g' /var/run/docker.sock)
    # see: https://www.influxdata.com/blog/docker-run-telegraf-as-non-root/
    # user: "0"
    networks:
      - monitoring
    ports:
      - 8125:8125
      - 6514:6514
    healthcheck:
      <<: *default-healthcheck
      # test: ["CMD", "curl", "-f", "http://telegraf:8125/ping"] >>> ??
    restart: always
    depends_on:
      influxdb:
        condition: service_healthy
    environment:
      - INFLUXDB_ORG
      - INFLUXDB_BUCKET
      - INFLUXDB_ADMIN_TOKEN
      # Plugins
      - HOSTNAME
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
    volumes:
      - ./telegraf:/etc/telegraf:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/hostfs:ro

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    networks:
      - monitoring
    ports:
      - 5432:5432
    healthcheck:
      <<: *default-healthcheck
      test: ['CMD-SHELL', 'psql -h localhost -U $${POSTGRES_USER} -c select 1 -d $${POSTGRES_DB}']
    restart: always
    environment:
      - POSTGRES_USER=${STACK_USER}
      - POSTGRES_PASSWORD=${STACK_PASSWORD}
      - POSTGRES_DB=grafana
    volumes:
      - postgres-volume:/var/lib/postgresql/data

  grafana:
    container_name: grafana
    image: grafana/grafana:${GRAFANA_VERSION}
    networks:
      - monitoring
    ports:
      - 3000:3000
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "wget -t1 -q -O - http://grafana:3000/api/health | grep ok"]
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      #- GF_DEFAULT_INSTANCE_NAME=setup
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${STACK_USER}
      - GF_DATABASE_PASSWORD=${STACK_PASSWORD}
      - GF_DATABASE_SSL_MODE=disable
      # datasources
      - INFLUXDB_ORG
      - INFLUXDB_BUCKET
      - INFLUXDB_ADMIN_TOKEN
    volumes:
      - grafana-volume:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/dashboards:ro